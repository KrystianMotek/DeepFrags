import numpy as np


class Output:
    def __init__(self, vector):
        self.vector = vector # row data generated by decoder 
        self.n = int((len(vector) - 3) / 3) # number of amino acids 

    @staticmethod
    def compute_dihedral(sin, cos):
        k = np.sqrt(np.square(sin) + np.square(cos))
        return np.degrees(np.arctan2(sin / k, cos / k))

    def displacement(self):
        return self.vector[0:3]
    
    def alpha(self):
        START = 3
        END = START + self.n
        return 180 * self.vector[START:END] # original alpha angles are normalized at the stage of data processing

    def sin_theta(self):
        START = 3 + self.n
        END = START + self.n
        return self.vector[START:END]
    
    def cos_theta(self):
        START = 3 + 2 * self.n
        END = START + self.n
        return self.vector[START:END]
    
    def theta(self):
        return self.compute_dihedral(self.sin_theta(), self.cos_theta())
    
    def to_original(self):
        angles = np.concatenate([[alpha, theta] for alpha, theta in zip(self.alpha(), self.theta())])
        return np.concatenate([self.displacement(), angles])


def one_hot_to_string(vector, codes):
    string = ""
    categories = len(codes)
    i = 0
    while i < len(vector):
        index = list(vector[i:i+categories]).index(1.0)
        string += codes[index]
        i += categories
    return string


def angles_distribution(ss, output: Output):
    # return plane and dihedral angles corresponding to secondary structure
    alpha = output.alpha()
    theta = output.theta()
    return [[ss, alpha, theta] for ss, alpha, theta in zip(ss, alpha, theta)]


def extract_ss(vector):
    # get secondary structure from label vector
    n = int(len(vector) / 23) 
    ORDINAL = 20 * n 
    return one_hot_to_string(vector[ORDINAL:], codes="HEC")


def hec_distribution(angles):
    h_angles = []
    e_angles = []
    c_angles = []
    for element in angles:
        ss = element[0]
        alpha = element[1]
        theta = element[2]
        if ss == "H": h_angles.append([alpha, theta])
        if ss == "E": e_angles.append([alpha, theta])
        if ss == "C": c_angles.append([alpha, theta])
    return h_angles, e_angles, c_angles
